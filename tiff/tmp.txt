var strTriangle=‘#’;
for (int i-0; i<7; ++i) {
	console.log(strTriangle);
	strTriangle += ‘#’;
}
———————

for (var i=1; i<=100; ++i) {
	var word=‘';

	if (i % 3 == 0) {
		word+=“Fizz”;
	}
	if (i % 5 == 0) {
		word+=“Buzz”;
	}
	if(word.length == 0) {
		word=String(i);
	}
	console.log(word);	
}

——————————

var size = 8;
var board='';

for (var i=0; i < size; i++) {
	for (var j=0; j < size; j++) {
		if ( ( (i + j) %2) != 0) {
			board+='#';
		}
		else {
			board+=' ';
		}
	}
	board+='\n';
}

console.log(board);

————————————

function min (x, y) {
 if (x<y) {
	return x;
}
return y;
}

——————————————

function isEven(number) {
	number = Math.abs(number);
	if (number === 0) {
		return true;
	}
	else if (number == 1) {
		return false;
	}
	else {
		isEven(number - 2);
	}
}

——————————————————

function countChar(word, character) {
	var counter = 0;
	for (int i =0; i< word.length; ++i) {
		if(word[i] == character) {
			++counter;
		}
	}
	return counter;
}

—————————————————————

function range(num1, num2) {
	var numbers = [];

	while( num1 <= num2) {
		numbers.push(num1);
		++num1;
	}
	return numbers;
}

function sum(numbers) {
	var sum = 0;
	
	for (var i=0; i<numbers.length; ++i) {
		sum += numbers[i];
	}
	
	return sum;
}

function rangeStep(num1, num2, step) {
	var numbers = [];

	while( num1 <= num2) {
		numbers.push(num1);
		num1+=step;
	}
	return numbers;
}

————————————————————

function reverseArray(array) {
	var newArray = [ ];

	for(var i = array.length-1; i>=0; ++i) {
		newArray.push(array[i]);
	}

	return newArray;
}

function reverseArrayInPlace() {	
	for(var i=0; i<array.length/2; ++i) {
		var temp = array[i];
		array[i] = array[array.length-1-i];
		array[array.length-1-i] = temp;
	}
}

————————————————————

function arrayToList(values) {
	var list = null;

	for (var i = values.length-1; i>=0;—i) {
		list = {value: values[i], rest: list};
	}
	return list;
}

function listToArray(list) {
	var array=[];

	for (var item=list; item!=null; item = item.rest ) {
		array.push(item.value);
	}
	return array;
}

function prepend(list, element) { 
	list = {value: element, rest: list};

	return list;
}

function nth (list, index) {
	if(list==null || index <0) {
		return undefined;
	}
	if(index == 0) {
		return list.value;
	}
	else {
		return nth(list.rest, index-1);
	}
}

————————————————————

function deepEqual (obj1, obj2) {
	if(obj1 === obj2) {
		return true;
	}

	if( obj1==null || obj2==null || typeof obj1!== “object" || typeof obj2 !== “object") {
		return false;
	}

	var v1 = 0, v2 = 0;

	for(var val in obj1){
		++v1;
	}

	for(var val in obj2) {
		++v2;

		if ( !(val in obj1) || !deepEqual(obj1[val], obj2[val])  ) {
			return false;
		}
	}

	return v1 == v2;
}


+———————————————————————

function forEach(array, func) {
	for (var i=0; i<array.length; ++i) {
		fun(array[i]);
	}
}

function reduce(array, combine, start) {
	var curr = start;
	forEach(array, function(a) {
		curr = combine(curr, a);
	});
	
	return curr;
}

function flattenDeep(array) {
	var newArray = [];
	forEach(array, function(a, b) {
		if(Object.getPrototypeOf([]) ==Array.prototype && a.length=1) {
			newArray.push[a[0]];
		}	
		else if (Object.getPrototypeOf([]) !=Array.prototype ) {
			newArray.push[a];
		}
		else {
			flattenDeep(a[0]);
		}
	});	
}

function assign(obj, sources) {	
	reduce(sources, function(a) {
		obj.push(a);
	});
}

function get (obj, path, defaultValue) {
	var loc=null;	

	reduce(path, function(a) {
		if(Object.getPrototypeOf([]) ==Array.prototype && a.length=1) {
			return a[0].value;
		}
		else if (Object.getPrototypeOf([]) !=Array.prototype ) {
			return a.value;
		}
		else {
			reduce(a[0]);
		}
	}
}